
Lab3_Unit6_lesson3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001f0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000320  08000328  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000320  08000320  00010328  2**0
                  CONTENTS
  4 .ARM          00000000  08000320  08000320  00010328  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000320  08000328  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000320  08000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000324  08000324  00010324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000328  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000328  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010328  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000912  00000000  00000000  00010351  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ab  00000000  00000000  00010c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000048  00000000  00000000  00010e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00010e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001d0e  00000000  00000000  00010e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000631  00000000  00000000  00012b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000803d  00000000  00000000  000131c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001b204  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  0001b280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000308 	.word	0x08000308

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000308 	.word	0x08000308

08000170 <main>:
#define RCC_CR         *(volatile uint32_t *)(RCC_BASE + 0x00)
#define RCC_CFGR       *(volatile uint32_t *)(RCC_BASE + 0x04)
#define RCC_APB2ENR    *(volatile uint32_t *)(RCC_BASE + 0x18)

int main(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0

	// Select PLL as clock source
	RCC_CFGR |= 0b10<<0;
 8000176:	4b38      	ldr	r3, [pc, #224]	; (8000258 <main+0xe8>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	4a37      	ldr	r2, [pc, #220]	; (8000258 <main+0xe8>)
 800017c:	f043 0302 	orr.w	r3, r3, #2
 8000180:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= 0b10<<2;
 8000182:	4b35      	ldr	r3, [pc, #212]	; (8000258 <main+0xe8>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a34      	ldr	r2, [pc, #208]	; (8000258 <main+0xe8>)
 8000188:	f043 0308 	orr.w	r3, r3, #8
 800018c:	6013      	str	r3, [r2, #0]

	// Enable PLL
	RCC_CR |= 1<<24;
 800018e:	4b33      	ldr	r3, [pc, #204]	; (800025c <main+0xec>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a32      	ldr	r2, [pc, #200]	; (800025c <main+0xec>)
 8000194:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000198:	6013      	str	r3, [r2, #0]

	// Set PLL mull 8
	// RCC_CFGR |= 0b0110<<18;
	RCC_CFGR    |= (0b0110<<18);    // PLL multiplication factor * 8
 800019a:	4b2f      	ldr	r3, [pc, #188]	; (8000258 <main+0xe8>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a2e      	ldr	r2, [pc, #184]	; (8000258 <main+0xe8>)
 80001a0:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 80001a4:	6013      	str	r3, [r2, #0]

	// AHB prescaler 1
	//RCC_CFGR &= (~(1<<7));

	// APB1 prescaler 2
	RCC_CFGR &= (~(1<<8));
 80001a6:	4b2c      	ldr	r3, [pc, #176]	; (8000258 <main+0xe8>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a2b      	ldr	r2, [pc, #172]	; (8000258 <main+0xe8>)
 80001ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80001b0:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= (~(1<<9));
 80001b2:	4b29      	ldr	r3, [pc, #164]	; (8000258 <main+0xe8>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a28      	ldr	r2, [pc, #160]	; (8000258 <main+0xe8>)
 80001b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80001bc:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= 1<<10;
 80001be:	4b26      	ldr	r3, [pc, #152]	; (8000258 <main+0xe8>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a25      	ldr	r2, [pc, #148]	; (8000258 <main+0xe8>)
 80001c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001c8:	6013      	str	r3, [r2, #0]

	// APB2 prescaler 4
	RCC_CFGR |= 1<<11;
 80001ca:	4b23      	ldr	r3, [pc, #140]	; (8000258 <main+0xe8>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a22      	ldr	r2, [pc, #136]	; (8000258 <main+0xe8>)
 80001d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001d4:	6013      	str	r3, [r2, #0]
	RCC_CFGR &= (~(1<<12));
 80001d6:	4b20      	ldr	r3, [pc, #128]	; (8000258 <main+0xe8>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <main+0xe8>)
 80001dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80001e0:	6013      	str	r3, [r2, #0]
	RCC_CFGR |= 1<<13;
 80001e2:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <main+0xe8>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4a1c      	ldr	r2, [pc, #112]	; (8000258 <main+0xe8>)
 80001e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001ec:	6013      	str	r3, [r2, #0]

	//Init Clock for GPIOA
	RCC_APB2ENR |= 1<<2;
 80001ee:	4b1c      	ldr	r3, [pc, #112]	; (8000260 <main+0xf0>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a1b      	ldr	r2, [pc, #108]	; (8000260 <main+0xf0>)
 80001f4:	f043 0304 	orr.w	r3, r3, #4
 80001f8:	6013      	str	r3, [r2, #0]

	//Init GPIOA
	GPIOA_CRH &= 0xFF0FFFFF;
 80001fa:	4b1a      	ldr	r3, [pc, #104]	; (8000264 <main+0xf4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a19      	ldr	r2, [pc, #100]	; (8000264 <main+0xf4>)
 8000200:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000204:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |= 0x00200000;
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <main+0xf4>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a16      	ldr	r2, [pc, #88]	; (8000264 <main+0xf4>)
 800020c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000210:	6013      	str	r3, [r2, #0]

	while(1)
	{
		GPIOA_ODR |= 1<<13 ;
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <main+0xf8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a14      	ldr	r2, [pc, #80]	; (8000268 <main+0xf8>)
 8000218:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800021c:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 5000; i++); // arbitrary delay
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e002      	b.n	800022a <main+0xba>
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000230:	4293      	cmp	r3, r2
 8000232:	ddf7      	ble.n	8000224 <main+0xb4>
		GPIOA_ODR &= ~(1<<13) ;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <main+0xf8>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <main+0xf8>)
 800023a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800023e:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < 5000; i++); // arbitrary delay
 8000240:	2300      	movs	r3, #0
 8000242:	603b      	str	r3, [r7, #0]
 8000244:	e002      	b.n	800024c <main+0xdc>
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	3301      	adds	r3, #1
 800024a:	603b      	str	r3, [r7, #0]
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000252:	4293      	cmp	r3, r2
 8000254:	ddf7      	ble.n	8000246 <main+0xd6>
		GPIOA_ODR |= 1<<13 ;
 8000256:	e7dc      	b.n	8000212 <main+0xa2>
 8000258:	40021004 	.word	0x40021004
 800025c:	40021000 	.word	0x40021000
 8000260:	40021018 	.word	0x40021018
 8000264:	40010804 	.word	0x40010804
 8000268:	4001080c 	.word	0x4001080c

0800026c <Reset_Handler>:
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <LoopForever+0x2>)
 800026e:	4685      	mov	sp, r0
 8000270:	f3af 8000 	nop.w
 8000274:	480c      	ldr	r0, [pc, #48]	; (80002a8 <LoopForever+0x6>)
 8000276:	490d      	ldr	r1, [pc, #52]	; (80002ac <LoopForever+0xa>)
 8000278:	4a0d      	ldr	r2, [pc, #52]	; (80002b0 <LoopForever+0xe>)
 800027a:	2300      	movs	r3, #0
 800027c:	e002      	b.n	8000284 <LoopCopyDataInit>

0800027e <CopyDataInit>:
 800027e:	58d4      	ldr	r4, [r2, r3]
 8000280:	50c4      	str	r4, [r0, r3]
 8000282:	3304      	adds	r3, #4

08000284 <LoopCopyDataInit>:
 8000284:	18c4      	adds	r4, r0, r3
 8000286:	428c      	cmp	r4, r1
 8000288:	d3f9      	bcc.n	800027e <CopyDataInit>
 800028a:	4a0a      	ldr	r2, [pc, #40]	; (80002b4 <LoopForever+0x12>)
 800028c:	4c0a      	ldr	r4, [pc, #40]	; (80002b8 <LoopForever+0x16>)
 800028e:	2300      	movs	r3, #0
 8000290:	e001      	b.n	8000296 <LoopFillZerobss>

08000292 <FillZerobss>:
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	3204      	adds	r2, #4

08000296 <LoopFillZerobss>:
 8000296:	42a2      	cmp	r2, r4
 8000298:	d3fb      	bcc.n	8000292 <FillZerobss>
 800029a:	f000 f811 	bl	80002c0 <__libc_init_array>
 800029e:	f7ff ff67 	bl	8000170 <main>

080002a2 <LoopForever>:
 80002a2:	e7fe      	b.n	80002a2 <LoopForever>
 80002a4:	20002800 	.word	0x20002800
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000000 	.word	0x20000000
 80002b0:	08000328 	.word	0x08000328
 80002b4:	20000000 	.word	0x20000000
 80002b8:	2000001c 	.word	0x2000001c

080002bc <ADC1_2_IRQHandler>:
 80002bc:	e7fe      	b.n	80002bc <ADC1_2_IRQHandler>
	...

080002c0 <__libc_init_array>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	2500      	movs	r5, #0
 80002c4:	4e0c      	ldr	r6, [pc, #48]	; (80002f8 <__libc_init_array+0x38>)
 80002c6:	4c0d      	ldr	r4, [pc, #52]	; (80002fc <__libc_init_array+0x3c>)
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	10a4      	asrs	r4, r4, #2
 80002cc:	42a5      	cmp	r5, r4
 80002ce:	d109      	bne.n	80002e4 <__libc_init_array+0x24>
 80002d0:	f000 f81a 	bl	8000308 <_init>
 80002d4:	2500      	movs	r5, #0
 80002d6:	4e0a      	ldr	r6, [pc, #40]	; (8000300 <__libc_init_array+0x40>)
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <__libc_init_array+0x44>)
 80002da:	1ba4      	subs	r4, r4, r6
 80002dc:	10a4      	asrs	r4, r4, #2
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d105      	bne.n	80002ee <__libc_init_array+0x2e>
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002e8:	4798      	blx	r3
 80002ea:	3501      	adds	r5, #1
 80002ec:	e7ee      	b.n	80002cc <__libc_init_array+0xc>
 80002ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f2:	4798      	blx	r3
 80002f4:	3501      	adds	r5, #1
 80002f6:	e7f2      	b.n	80002de <__libc_init_array+0x1e>
 80002f8:	08000320 	.word	0x08000320
 80002fc:	08000320 	.word	0x08000320
 8000300:	08000320 	.word	0x08000320
 8000304:	08000324 	.word	0x08000324

08000308 <_init>:
 8000308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800030a:	bf00      	nop
 800030c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030e:	bc08      	pop	{r3}
 8000310:	469e      	mov	lr, r3
 8000312:	4770      	bx	lr

08000314 <_fini>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr
